name: awsgoo
services:
  nginx-proxy:
    build: ../../docker_file/nginx_compose
    ports:
      - "9889:80"
    depends_on:
      - blog
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 50M
        reservations:
          cpus: '0.05'
          memory: 20M


  scg-proxy:
    image: stayonasdev/sc-gateway:0.5.1
    ports:
      - "9000:9000"
    depends_on:
      - blog
      - sc-eureka
    environment:
      - HELLO_SERVICE_URI=http://awsgoo-blog-1:8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://sc-eureka:8765/eureka

  sc-eureka:
    image: stayonasdev/sc-eureka:0.1.0
    container_name: sc-eureka
    ports:
      - "8765:8765"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://sc-eureka:8765/eureka

  sc-user-svc:
    image: stayonasdev/sc-user-svc:0.2.0
    #container_name: sc-user-svc
    #ports:
    # - "9001:9001"
    depends_on:
      - sc-eureka
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://sc-eureka:8765/eureka
      - SERVER_PORT=9001
      - CPU_STRESS_NUMBER=500
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_COM_EXAMPLE_USER_SERVICE=DEBUG # 사용자 패키지를 DEBUG로 설정
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG  # Spring Web 관련 로그를 상세히 보고 싶을 때 추가
    deploy:
      mode: replicated
      replicas: 1 # https://docs.docker.com/compose/compose-file/deploy/#replicas
      resources: # https://docs.docker.com/compose/compose-file/compose-file-v3/#resources
        limits:
          cpus: '0.5'
          memory: 300M
        reservations:
          cpus: '0.01'
          memory: 250M


  blog:
    # build: ../../docker_file/httpd
    image: stayonasdev/spring-boot-docker:0.3.0
    ports:
      - "9765:8080"
    deploy:
      mode: replicated
      replicas: 1 # https://docs.docker.com/compose/compose-file/deploy/#replicas
      resources: # https://docs.docker.com/compose/compose-file/compose-file-v3/#resources
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.01'
          memory: 30M
    expose:
      - "8080"
    environment:
      - VIRTUAL_HOST=aws.abcdef.com,aws.google.com,localhost
      - VIRTUAL_PORT=8080
     #- CPU_STRESS_NUMBER=50000
      - CPU_STRESS_NUMBER=500


  controller:
    image: ngrinder/controller:3.5.9-p1
    platform: linux/amd64
    restart: always
    ports:
      - "8300:80"
      - "16001:16001"
      - "12000-12009:12000-12009"
    volumes:
      - ./ngrinder-controller:/opt/ngrinder-controller

  agent:
    image: ngrinder/agent:3.5.9-p1
    platform: linux/amd64
    restart: always
    links:
      - controller
